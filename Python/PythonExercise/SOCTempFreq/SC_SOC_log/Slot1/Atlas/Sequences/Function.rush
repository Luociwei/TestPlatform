def setFanSpeed(speed)
{
	if(speed<0) {
		speed=0
	}
	else if(100<speed) {
		speed=100
	}

	Globals.fanSpeed=speed

	# check current value
	Globals.currentFanSpeed = numerify(Atlas.execute_test("Get Fan Speed",[Globals.socTestName,"Get Fan Speed"], Atlas.call_plugin, "Fixture", "GET FAN SPEED"))
	Atlas.Log.info("currentFanSpeed: " + stringify(Globals.currentFanSpeed))

	if(Globals.currentFanSpeed<>Globals.fanSpeed)
	{
		Atlas.execute_test("Set Fan Speed " + stringify(Globals.fanSpeed),[Globals.socTestName,"Set Fan Speed " + stringify(Globals.fanSpeed)], Atlas.call_plugin, "Fixture", "SET FAN SPEED", {"speed": Globals.fanSpeed},{}, {"timeout":60})
		Atlas.execute_test("Waiting 2s for fan speed " + stringify(Globals.fanSpeed),[Globals.socTestName,"Waiting 2s for fan speed " + stringify(Globals.fanSpeed)], system_sleep, 2)
	}	
}

def system_sleep(v)
{
	System.sleep(v)
	Atlas.create_record(["Sleep", stringify(v)], v, "sec")
}

def enterDiags(pdcaPrefix)
{
	Atlas.execute_test("Change Type to EFI", [Globals.socTestName, pdcaPrefix], Atlas.call_plugin, "Dut",
					   "setUnitType", {"FrameTerminator": ":-)", "unitType": "EFI", "LogPath": Globals.logFile, "RemoveNonAsciiOnRead":1,"enableSeparateWriteFile": 0,"DutConfig":{"FFUart":{"UartBaud":numerify(Globals.baudRate)}}})
	Atlas.execute_test("Power On DUT", [Globals.socTestName, pdcaPrefix], Atlas.call_plugin, "Fixture",
					   "Enter DIAGS", {},{}, {"timeout": 60})
	# 15 sec is enough
	# 12122018 change to 10 sec
	Atlas.execute_test("Allow DUT to \"auto-boot\"", [Globals.socTestName, pdcaPrefix], system_sleep, 10)

	if (Globals.autoBoot == :FALSE:)
	{
		# check if device is listed in registry as Apple Mobile Device (Recovery Mode)
		# this works only under iBoot or DFU mode
		Atlas.execute_test("Check if DUT is in Recovery",[Globals.socTestName,"Check if DUT is in Recovery"], Atlas.call_plugin, "Fixture", "checkDeviceinRecovery", {"interval": 1, "retry": 30})

		# write "diags" to enter diags mode
		Atlas.execute_test("Enter DIAGS", [Globals.socTestName, pdcaPrefix], Atlas.call_plugin, "Dut", "enterDiags",{},{}, {"timeout":60})
	}
	Globals.env = "DIAGS"
	# redundant
	#parseCommand("Wait for Diags", "enterDiags", 60, {})
}

def getSerialNumber()
{
	Globals.unitSn = Atlas.call_plugin("Dut", "sendCommand", {"parseCommand": "syscfg print MLB#", "timeout": 60,
		"testname": "syscfg print MLB#"})["MLB_Num"]
	Globals.logFile = Globals.unitSn + "_rawuart.log"
	Atlas.call_plugin("Dut", "setUnitType", { "RemovingOccurrences":{"toBeRemoved":Globals.toBeRemoved,"removeBetweenSeparator":1,"separator":"\n"}, 
						"unitType": "EFI", "RemoveNonAsciiOnRead":1, "LogPath": Globals.logFile, "testname": "Update logPath", 
						"DutConfig":{"FFUart":{"UartBaud":numerify(Globals.baudRate)}}})
}

def parseCommand(description, command, timeout, extraPluginParams)
{
	defaultPluginParams = {"parseCommand": command, "timeout": timeout,"testname": Globals.socTestName,
		"subtestname": description}
	limitGroupA = Globals.limits_file["xVT"]

	if :TRUE:
	{
	    if (description[0:5] == "bgct_")
	    {
	    	return Atlas.execute_test(description, Atlas.call_plugin, "Dut", "sendCommand", defaultPluginParams
								  + extraPluginParams, limitGroupA)
	    }
		return Atlas.execute_test(description, Atlas.call_plugin, "Dut", "sendCommand", defaultPluginParams
								  + extraPluginParams, limitGroupA)
	} onError e -> if (has_key(extraPluginParams, "goToFAOnFail"))
	{
		Atlas.Log.error("GO to fa")
		raise $#@!("GoToFA")
	}
	else
	{
		Atlas.Log.error("No go fa")
		raise e
	}
}

def enterENV(env, expect, prefix, subtestname)
{
	# Atlas.execute_test("Enter iBoot",[Globals.socTestName], Atlas.call_plugin, "Fixture",
	# 				   "Enter IBOOT", {"testname": prefix + " - Enter iBoot "+stringify(env)})
	Atlas.Log.info("Wanna reboot, env now is: "+Globals.env)
	if (Globals.env ==  "DIAGS" || Globals.env ==  "RBM"){
		Atlas.execute_test("Enter iBoot", Atlas.call_plugin, "Dut","sendCommand", {"command": "reset", "ignoreResp":1, "timeout":30, "testname" : Globals.socTestName, "subtestname": "Enter iBoot"})
	}
	else if (Globals.env ==  "PERTOS"){
		Atlas.execute_test("Enter iBoot", Atlas.call_plugin, "Dut","sendCommand", {"command": "pmgr reset", "ignoreResp":1, "timeout":30, "testname" : Globals.socTestName, "subtestname": "Enter iBoot"})
	}
	
	Atlas.execute_test("Change Type to iBoot",[Globals.socTestName,"Change Type to iBoot"], Atlas.call_plugin, "Dut",
						   "setUnitType", {"FrameTerminator": "]",  "RemovingOccurrences":{"toBeRemoved":Globals.toBeRemoved,
						   "removeBetweenSeparator":1,"separator":"\n"}, "unitType": "custom", "RemoveNonAsciiOnRead":1, 
						   "LogPath": Globals.logFile, "testname": "setUnitType "+stringify(env),
						   "DutConfig":{"FFUart":{"UartBaud":numerify(Globals.baudRate)}}})

	if (env == "diags")
	{
		Atlas.execute_test("Change Type to EFI", [Globals.socTestName, prefix], Atlas.call_plugin, "Dut",
					   "setUnitType", {"FrameTerminator": ":-)", "unitType": "EFI", "LogPath": Globals.logFile, "RemoveNonAsciiOnRead":1,"enableSeparateWriteFile": 0,"DutConfig":{"FFUart":{"UartBaud":numerify(Globals.baudRate)}}})
		# write "diags" to enter diags mode
		Atlas.execute_test("Enter DIAGS", [Globals.socTestName, prefix], Atlas.call_plugin, "Dut", "enterDiags",{},{}, {"timeout":60})
		Globals.unitType = "efi"
	}
	else
	{
		frameTerminator = "m]"

		if (env == "rtos")
		{
			frameTerminator = "SEGPE>"
		}
		else if (env == "rbm")
		{
			frameTerminator = " <-"
		}
		
		Atlas.execute_test("Set Unit Type to Custom",[Globals.socTestName,"Set Unit Type to Custom"], Atlas.call_plugin, "Dut", "setUnitType", 
						   {"unitType": "custom","FrameTerminator":frameTerminator,
						   "HangDetectionTimeout": Globals.hangDetectionTimeout,"LogPath": Globals.logFile,
						   "timeout": 60, "AppendPacketWith": "\n",
						   "enableSeparateReadWriteFile": 1,"RemoveNonAsciiOnRead":1,
						   "ConsoleDataAttemptSendOnOpen": 0, "EndUartWith": "",  
						   "RemovingOccurrences":{"toBeRemoved":Globals.toBeRemoved,"removeBetweenSeparator":1,"separator":"\n"},
						   "LoggingLayerLogIsDateAdded" : 1, "testname": prefix + " - setUnitType " + stringify(env),
						   "DutConfig":{"FFUart":{"UartBaud":numerify(Globals.baudRate)}}})
		Atlas.execute_test("DUT Enter " + env, Atlas.call_plugin, "Dut", "enterEnv",
							{"command": env, "FrameTerminator":frameTerminator,"waitForiBootTimeout":15,"ignoreBreakAutoBootFail":1,"timeout":25,"testname" : Globals.socTestName, "subtestname": "DUT Enter " + env})
	}

	if (Globals.firstPERTOS == 1 && env == "rtos")
	{
		Atlas.execute_test("Get " + env + " Version",[Globals.socTestName,"Get " + env + " Version"], Atlas.call_plugin, "runTest", "getEnvVersion", 
							{"expect": env, "log": Globals.logFile})
		Globals.firstPERTOS = 0
	}
	else if (Globals.firstRBM == 1 && env == "rbm")
	{
		Atlas.execute_test("Get " + env + " Version",[Globals.socTestName,"Get " + env + " Version"], Atlas.call_plugin, "runTest", "getEnvVersion", 
							{"expect": env, "log": Globals.logFile})
		Globals.firstRBM = 0
	}
}

def shutdown(subtestname)
{
	Atlas.execute_test("Set FrameTerminator to N/A", [Globals.socTestName, subtestname], Atlas.call_plugin, "Dut",
						   "setUnitType", {"FrameTerminator": "", "unitType": "custom","RemoveNonAsciiOnRead":1, 
						   "RemovingOccurrences":{"toBeRemoved":Globals.toBeRemoved,"removeBetweenSeparator":1,"separator":"\n"},
						   "LogPath": Globals.logFile, "timeout": 20, "AppendPacketWith": "\n",
						   "enableSeparateReadWriteFile": 1, "ConsoleDataAttemptSendOnOpen": 0,
						   "EndUartWith": "", "LoggingLayerLogIsDateAdded" : 1, 
						   "DutConfig":{"FFUart":{"UartBaud":numerify(Globals.baudRate)}}}) onError e -> Atlas.Log.error(subtestname 
																			+ ", setUnitType failed, but will continue to power off by fixture.")
	Atlas.execute_test("Shutdown", Atlas.call_plugin,
					   "Dut", "sendCommand", {"command": "shutdown","ignoreResp": 1,
					   "timeout": 20,"testname" : Globals.socTestName, "subtestname": "Shutdown"}) onError e -> Atlas.Log.error(subtestname 
															+ ", diags shutdown command failed, but will continue to power off by fixture.")
	Atlas.execute_test("Waiting for DUT shutdown...", [Globals.socTestName, subtestname], system_sleep, 10)
	Atlas.execute_test("Power Off DUT", [Globals.socTestName, subtestname], Atlas.call_plugin,
					   "Fixture", "POWER OFF", {},{}, {"timeout": 60})
}

def UI_ShowMessage(msg)
{
	if (Globals.popupMessages)
	{
		Atlas.call_app("show-form", {"type":"message", "message":msg})
	}
	
	Atlas.Log.info("show-form message: " + msg)
}

