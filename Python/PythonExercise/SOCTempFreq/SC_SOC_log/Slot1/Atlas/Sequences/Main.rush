main()
{
	Atlas.Log.info(Atlas.Unit.unit_identifier + " running in [" + Atlas.Unit.test_mode_name + "] mode!")
	System.sleep(3) #Waiting for fixture to fully reset as temporary solution
	if (Atlas.Unit.test_mode_name == "Enter DFU")
	{
		Atlas.execute_test("Enter DFU", Atlas.call_plugin, "Fixture", "Enter DFU",
					   {},{}, {"timeout":60})
		System.sleep(3000)
	}
	else
	{
		if :TRUE:
		{
			Globals.stationID = StationInfo.station_type()
			Globals.build = "P2"
			Globals.atlasVersion = PList.load("/AppleInternal/Library/Frameworks/Rush.framework/Resources/Info.plist")["CFBundleVersion"]
			Globals.rushRevision = "0.0.1n"
			Globals.testPlanVersion = "0.913"
			Globals.socTestName = "SOC"
			Globals.tpValidationMode = :FALSE:
			Globals.processControl = :FALSE:
			# do process control only when Production selected and SOC-TEST is station ID.
			if(Atlas.Unit.test_mode_name == "Production") {
				if(Strings.toupper(Globals.stationID) == "SOC-TEST") {
					Globals.processControl = :TRUE:
				}
			}

			Globals.autoBoot = :FALSE:
			Globals.supportDiag = :FALSE:
			if(
				Atlas.Unit.test_mode_name == "Production" ||
				Atlas.Unit.test_mode_name == "Offline_Mode_POR_RtosRbm" ||
				Atlas.Unit.test_mode_name == "Offline_Mode_POR_Rtos" ||
				Atlas.Unit.test_mode_name == "Offline_Mode_POR_Rbm"
				) {
				Globals.supportDiag = :TRUE:
			}
			# Offline_Mode handling
			Globals.OfflineModeRestore = :FALSE:
			if(
				Atlas.Unit.test_mode_name == "Offline_Mode_Restore_RtosRbm_NoDiag" ||
				Atlas.Unit.test_mode_name == "Offline_Mode_Restore_Rtos_NoDiag" ||
				Atlas.Unit.test_mode_name == "Offline_Mode_Restore_Rbm_NoDiag" ||
				Atlas.Unit.test_mode_name == "Offline_Mode_Restore_Experiment"
				) {
				Globals.OfflineModeRestore = :TRUE:
			}
			# Experiment handling
			Globals.Experiment = :FALSE:
			if(
				Atlas.Unit.test_mode_name == "Offline_Mode_Restore_Experiment"
				) {
				Globals.Experiment = :TRUE:
			}
			# following can be controlled by Offline_Mode_Restore
			# please define image file name here when you restore from image
			Globals.bootPertosFromNand = :TRUE:
			Globals.overridePertos = :FALSE:
			Globals.pertosImage = "console.pert"
			Globals.bootRBMFromNand = :TRUE:
			Globals.overrideRBM = :FALSE:
			Globals.rbmImage = "rbm.j3xx.im4p"
			#
			Globals.testRtos = :TRUE:
			Globals.testRbm = :TRUE:
			if(
				Atlas.Unit.test_mode_name == "Offline_Mode_POR_Rtos" ||
				Atlas.Unit.test_mode_name == "Offline_Mode_Restore_Rtos_NoDiag"
				) {
				Globals.testRbm = :FALSE:
			}
			if(
				Atlas.Unit.test_mode_name == "Offline_Mode_POR_Rbm" ||
				Atlas.Unit.test_mode_name == "Offline_Mode_Restore_Rbm_NoDiag"
				) {
				Globals.testRtos = :FALSE:
			}
			#
			Globals.skipNow = :FALSE:
			Globals.useMobileRestore = :FALSE:
			# serial number check
			Globals.scannedSNs = {}
			Globals.snReady = :FALSE:
			Globals.snError = ""
			Globals.unitSn = ""
			# fan speed related
			Globals.fanSpeed = 0
			Globals.currentFanSpeed = 0
			# Fuse config and revision
			Globals.fuseConfig = {}

			if(Globals.OfflineModeRestore == :TRUE:) {
				# serial number
				while (!Globals.snReady)
				{
					Atlas.execute_test("serial number scan",[Globals.socTestName,"serial number scan"], serialNumberRequest, Atlas.Unit.user_info) onError e ->  Globals.snReady = :FALSE:
 					if(Globals.snReady)
					{
						Atlas.execute_test("serial number scan",[Globals.socTestName,"serial number scan"], serialNumberRequest, Atlas.Unit.user_info) onError e ->  Globals.snReady = :FALSE:
					}
				}
			}

			init("limits/SOC_LIMITS.csv")

			do_Test()

			if (Globals.hasEverFailed || Globals.exception)
			{
				raise exception("Test Failed!!!")
			}

			finishAllProcessControl() onError e -> failureWithProcessControl(:FALSE:, e)
		} onError e -> failureWithProcessControl(:TRUE:, e)
	}
}

init(limitsFile)
{
	Globals.popupMessages = :TRUE:
	Globals.hasEverFailed = :FALSE:
	Globals.COF = :TRUE:
	Globals.exception = :FALSE:
	Globals.logFile = "rawuart.log"
	Globals.errorCount1 = 0
	Globals.errorCount2 = 0
	Globals.errorCount3 = 0
	Globals.firstPERTOS = 1
	Globals.firstRBM = 1
	Globals.enableStagger = 0
	Globals.frameTerminator = ":-)"
	Globals.unitType = "unknown"
	Globals.env = "unknown"
	Globals.boardID = 0x12
	Globals.ddrVendor = "Micron"
	Globals.socPDict = {}
	Globals.baudRate = "115200"
	Globals.fixtureFT = "_done"
	Globals.toBeRemoved = ["THM active","Too hot. Cooling down.", "in_test=","Cooled for"]
	Globals.hangDetectionTimeout = 300
	Globals.vrefDict = {}
	Globals.bincutDict = {"disableCheck": 0}
	Globals.failureCount = 0
	Globals.UOPCheck = :FALSE:

	#A<Atlas Revision>-<Build Stage>-TP<TestPlan Revision>-V<Rush Revision>
	Globals.softwareVersion = "A" + Globals.atlasVersion + "-" + Globals.build
	+ "-TP0v" + Globals.testPlanVersion + "-V" + Globals.rushRevision
	Globals.softwareName = "Atlas " + Globals.atlasVersion
	Globals.limits_file = Atlas.load_limits_file(limitsFile)
	Atlas.Log.info(Atlas.Unit.unit_identifier + " rushRevision: " + stringify(Globals.rushRevision))

	if (Strings.toupper(StationInfo.station_type()) <> "SOC-TEST")
	{
		#Globals.useMobileRestore = :TRUE:
	}
	
	Globals.slotNum = numerify(Atlas.execute_test("Get Slot Number",[Globals.socTestName,"Get Slot Number"], Atlas.call_plugin, "Fixture", "getSlotNumber"))
	Atlas.Log.info("SLOT number is " + stringify(Globals.slotNum))

	if(Globals.OfflineModeRestore == :TRUE:)
	{
		# read from bundle or read from image
		Globals.bootPertosFromNand = :FALSE:
		Globals.overridePertos = :FALSE:
		Globals.bootRBMFromNand = :FALSE:
		Globals.overrideRBM = :FALSE:

		Globals.logFile = Globals.unitSn + "_rawuart.log"

		Atlas.execute_test("Fixture In",[Globals.socTestName,"Fixture In"], Atlas.call_plugin, "Fixture", "Engage Fixture")
		Atlas.execute_test("Fixture - IS FIXTURE CLOSED",[Globals.socTestName,"Fixture - IS FIXTURE CLOSED"], Atlas.call_plugin, "Fixture", "IS FIXTURE CLOSED")
		Atlas.execute_test("Fixture - Turn on \"In Progress\" LED",[Globals.socTestName,"Fixture - Turn on \"In Progress\" LED"], Atlas.call_plugin, "Fixture", "LED INPROGRESS ON", {},{}, {"timeout":60})

		Atlas.execute_test("Waiting 3s for Fixture Close",[Globals.socTestName,"Waiting 3s for Fixture Close"], system_sleep, 3)
	}
	else
	{
		# Following is required only for manual start button method.
		# Please check station.rush file.
		# Atlas.execute_test("Fixture In", Atlas.call_plugin, "Fixture", "Engage Fixture")
		# Atlas.execute_test("Fixture - IS FIXTURE CLOSED", Atlas.call_plugin, "Fixture", "IS FIXTURE CLOSED")
		# Atlas.execute_test("Fixture - Turn on \"In Progress\" LED", Atlas.call_plugin, "Fixture", "LED INPROGRESS ON", {},{}, {"timeout":60})
	}

	if (Globals.supportDiag == :FALSE:)
	{
		Globals.rushRevision = Globals.rushRevision + "_" + Atlas.Unit.test_mode_name
	} 

	Atlas.execute_test("Get USB/UART Path",[Globals.socTestName,"Get USB/UART Path"], Atlas.call_plugin,
					  "Fixture", "CREATE UNIT TRANSPORT", {},{}, {"timeout":60})
	Atlas.execute_test("LED \"In Progress\" On",[Globals.socTestName,"LED \"In Progress\" On"], Atlas.call_plugin,
					   "Fixture", "LED INPROGRESS ON", {},{}, {"timeout":60})

	#Get Host Model. For available query items, please refer to cmd: ioreg -d2 -c IOPlatformExpertDevice
	Globals.hostInfo =  Atlas.execute_test("GET HOST INFO",[Globals.socTestName,"GET HOST INFO"], Atlas.call_plugin, "Fixture", "GET HOST INFO", { "query" : "model" })
	
	if (Globals.hostInfo["model"] <> "Macmini7,1")
	{
		Globals.enableStagger = 1
	} 

	Atlas.Log.info("Host Mac: " + stringify( Globals.hostInfo) + " , Globals.enableStagger = " + stringify(Globals.enableStagger) +", stagger = 2s if 0")

	# default policy AAB
	# Atlas.call_plugin("runTest", "updateUserInfo", 
	# 				   {"userinfo":{ "retestPolicy_" + stringify(Globals.failureCount) : "AAB" }})

	if(Globals.supportDiag == :TRUE:) {
		enterDiags("Initial Setup")
		# TODO: integrate
		Atlas.execute_test("Diags_Info_MLB-Serial",[Globals.socTestName,"Diags_Info_MLB-Serial"], getSerialNumber)
	
		#restore_dut("PERTOS","SEGPE>","RETSORE PERTOS")
		#restore_dut("RBM"," <-","RETSORE RBM")

		Atlas.execute_test("Set RTC", [Globals.socTestName, "setRTC - start"], Atlas.call_plugin, "Dut", "setRTC", {}, {}, {"timeout":60})
	}
	
	configParams = {"stationID": Globals.stationID,
			  "softwareversion" : Globals.softwareVersion,
			  	 "softwarename" : Globals.softwareName,
				"limitsversion" : "1",
				 "serialnumber" : Globals.unitSn}
	Atlas.execute_test("Start Test Process",[Globals.socTestName,"Start Test Process"],
						   Atlas.call_plugin, "TestProcess", "start", configParams)
						   
	if(Globals.supportDiag == :TRUE:) {
		if (Globals.processControl == :TRUE:) {
			Atlas.execute_test("Start Process Control",[Globals.socTestName,"Start Process Control"], Atlas.call_plugin, "ProcessControl", "start", configParams)
		}

		# TODO: integrate
		Globals.socPDict = Atlas.execute_test("Diags_Info_SOC-Rev", Atlas.call_plugin, "Dut","sendCommand", {"command": "soc -p", "timeout":10, "testname" : Globals.socTestName, "subtestname": "Diags_Info_SOC-Rev"})
		Globals.fuseRev = numerify(Globals.socPDict["FUSE_REV"])
		Globals.ddrVendor = stringify(Globals.socPDict["DRAM_VENDOR"])
		Globals.siliconRevision = stringify(Globals.socPDict["CPRV"])
		Atlas.Log.info("fuse-rev: " + stringify(Globals.fuseRev) + ", DDR Vendor: " + Globals.ddrVendor + ", CPRV: " + Globals.siliconRevision)

		# # TODO: integrate
		Atlas.execute_test("Diags_info_SOC_LIST_PERF_STATE", Atlas.call_plugin, "Dut","sendCommand", {"command":"soc -p list-perf-state", "timeout":10, "testname" : Globals.socTestName, "subtestname": "Diags_info_SOC_LIST_PERF_STATE"})

		# TODO: integrate
		Globals.boardID = numerify(Atlas.execute_test("Diags_Info_BoardID", Atlas.call_plugin, "Dut","sendCommand", 
							{"parseCommand":"boardid", "testname" : Globals.socTestName, "subtestname": "Diags_Info_BoardID","timeout":60})["boardid"])
		# TODO: integrate
		Atlas.execute_test("Diags_Info_PMUADC", Atlas.call_plugin, "Dut","sendCommand", 
							{"command":"pmuadc --read all --avg 100", "timeout":60, "testname" : Globals.socTestName, "subtestname": "Diags_Info_PMUADC"}, {}, {})

		if (Globals.processControl == :TRUE:)
		{
			Atlas.execute_test("UOP Check",[Globals.socTestName,"UOP Check"], Atlas.call_plugin,"TestProcess", "amIOK", {}, {}, {"timeout": 10})
			Globals.UOPCheck = :TRUE:
		}
	
		Atlas.execute_test("Get Config",[Globals.socTestName,"Get Config"], getConfig)

		Atlas.execute_test("Set Station Attributes",[Globals.socTestName,"Set Station Attributes"], Atlas.call_plugin,
						   "Fixture", "SET STATION ATTRIBUTES", {},{}, {"timeout":60})
		
		Atlas.execute_test("Setting Test Plan Parametric Key",[Globals.socTestName,"Setting Test Plan Parametric Key"], setParametricTPKey, {})

		# Check AC Log
		# Atlas.execute_test("Check AC Log-SE_DumpAClogs",  Atlas.call_plugin, "Dut", "sendCommand", {"command": "bblib -e SE_DumpAClogs()", "timeout":150})
		# Atlas.execute_test("Check AC Log-SH_Off",  Atlas.call_plugin, "Dut", "sendCommand", {"command": "bblib -e SH_Off()", "timeout":150})
	}
}

setParametricTPKey()
{
	Atlas.create_record(["SOC TEST PLAN Version"], numerify(Globals.testPlanVersion), "")
}

getConfig()
{
	cfg = Atlas.call_plugin("Dut", "sendCommand", {"parseCommand": "syscfg print CFG#", "timeout": 60,
		"testname": "syscfg print CFG#"})["CFG"]
	cfgArray = tokenize(cfg, "/")
	cfg = cfgArray[0]

	for index in range(1, size(cfgArray))
	{
		cfg = cfg + "#" + cfgArray[index]
	}

	Atlas.add_device_attribute("serialnumber", Globals.unitSn + "_" + cfg)
}

finishAllProcessControl()
{
	# Atlas.call_plugin("runTest", "updateUserInfo", 
	# 				   {"userinfo":{ "retestPolicy_" + stringify(Globals.failureCount) : "AAB" }})

	Atlas.execute_test("CP Error Check", [Globals.socTestName, "CP Error Check"], Atlas.call_plugin, "runTest", "checkError",
					   {"expect": "coherence.*error", "log": Globals.logFile})

	Globals.errorCount3 = Atlas.call_plugin("runTest", "checkError",
					   {"expect": "\(TestProcess\).*<Error>.*name", "log": "Unit.log", "byPASS": 1, "testname" : Globals.socTestName})

	Atlas.execute_test("Test name Check",[Globals.socTestName,"Test name Check"], checkValueWithLimit, "Test name error count", Globals.errorCount3, 0, 1)

	Atlas.execute_test("Get Fan Status",[Globals.socTestName,"Get Fan Status"], Atlas.call_plugin, "Fixture", "IS FAN OK", {},{}, {"timeout":60})
		onError e -> if (:TRUE:) {
			#Globals.hasEverFailed = :TRUE:
			#Globals.failureCount = Globals.failureCount + 1
			Atlas.Log.error("FanCheck Failed!!")
		}
	
	# zip fixture log and upload to insight
	System.system("rm /vault/Atlas/FixtureLog/FixtureLog.zip") onError e -> Atlas.Log.error("rm System Call Failed!!!")
	System.system("zip -r /vault/Atlas/FixtureLog/FixtureLog.zip /vault/Atlas/FixtureLog") onError e -> Atlas.Log.error("zip System Call Failed!!!")
	Atlas.execute_test("Waiting 3s for zipping Fixture Log files",[Globals.socTestName,"Waiting 3s for zipping Fixture Log files"], system_sleep, 3)
	Atlas.execute_test("Upload Fixture Log zip file to PDCA",[Globals.socTestName,"Upload Fixture Log zip file to PDCA"], Atlas.call_plugin, "Utilities", "uploadFileToPDCA",  
					   {"filePath":"/vault/Atlas/FixtureLog/FixtureLog.zip", "alwaysPass":1}) onError e -> Atlas.Log.error("Fixture Log Upload Failed!!!")

	# upload to insight
	Atlas.execute_test("Upload Test Plan CSV to PDCA",[Globals.socTestName,"Upload Test Plan CSV to PDCA"], Atlas.call_plugin, "Utilities", "uploadFileToPDCA",  
					   {"filePath":"~/Library/Atlas/Resources/*.csv", "alwaysPass":1}) onError e -> Atlas.Log.error("TP Upload Failed!!!")

	Atlas.execute_test("Upload Rush Files to PDCA",[Globals.socTestName,"Upload Rush Files to PDCA"],
					   Atlas.call_plugin, "Utilities", "uploadFileToPDCA", 
					   {"filePath":"~/Library/Atlas/Sequences/*.rush", "alwaysPass":1}) onError e -> Atlas.Log.error("Rush Upload Failed!!!")

	Atlas.execute_test("Upload GH Station Info to PDCA",[Globals.socTestName,"Upload GH Station Info to PDCA"],
					   Atlas.call_plugin, "Utilities", "uploadFileToPDCA", 
					   {"filePath":"/vault/data_collection/test_station_config/gh_station_info.json", "alwaysPass":1}) onError e -> Atlas.Log.error("GH Station Info Upload Failed!!!")

	Atlas.execute_test("Submitting data to PDCA...",[Globals.socTestName,"Submitting data to PDCA..."], system_sleep, 0)
	System.sleep(5)



	/*
	diagsRetry = 0
	while(diagsRetry < 3)
	{       
		diagsPass = -1
		enterENV("diags", ":-)", "Finish", "enterDiags") onError e -> diagsPass = 0
		#enterDiags("Finish")  onError e -> diagsPass = 0
		if (diagsPass == 0)
		{ 
			diagsRetry = diagsRetry + 1
		} else {
			diagsRetry = 3
		}
	}
	*/
	#enterENV("diags", ":-)", "Finish", "enterDiags")
	if(Globals.supportDiag == :TRUE:) {
		# enterDiags("Finish")
		enterENV("diags", ":-)", "Finish", "enterDiags")
		Atlas.execute_test("set RTC", [Globals.socTestName,"setRTC - finish"], Atlas.call_plugin, "Dut", "setRTC", {}, {}, {"timeout":60})
	}
	
	if (Globals.processControl && Globals.UOPCheck)
	{
		poisonDevice(:TRUE:) onError e -> Globals.hasEverFailed = :TRUE:
		Atlas.execute_test("Finish Process Control",[Globals.socTestName,"Finish Process Control"], Atlas.call_plugin,
					   "ProcessControl",  "finish") onError e -> Globals.hasEverFailed = :TRUE:
	}

	# Check AC Log
	# Atlas.execute_test("Check AC Log-SE_DumpAClogs",  Atlas.call_plugin, "Dut", "sendCommand", {"command": "bblib -e SE_DumpAClogs()", "timeout":150})
	# Atlas.execute_test("Check AC Log-SH_Off",  Atlas.call_plugin, "Dut", "sendCommand", {"command": "bblib -e SH_Off()", "timeout":150})

	Atlas.execute_test("Finish Test Process",[Globals.socTestName,"Finish Test Process"], Atlas.call_plugin,
					   "TestProcess",  "finish") onError e -> Globals.hasEverFailed = :TRUE:

	shutdown("Shutdown") onError e -> Globals.hasEverFailed = :TRUE:

	if(Globals.hasEverFailed || Globals.exception)
	{
		Atlas.execute_test("Red LED ON",[Globals.socTestName,"Red LED ON"], Atlas.call_plugin, "Fixture", "LED RED ON")
	}
	else
	{
		Atlas.execute_test("Turn on Green LED",[Globals.socTestName,"Turn on Green LED"], Atlas.call_plugin, "Fixture", "LED GREEN ON")
	}
}

failureWithProcessControl(shouldRunProcessControl, e)
{
	Atlas.Log.error("caught exception in rush sequence error " + stringify(e.class))
	Globals.hasEverFailed = :TRUE:
	shouldShutdown = :FALSE:

	# may need to update regex string based on slotNum.
	if (Globals.slotNum < 5)
	{
		Atlas.execute_test("UART USB Disconnection Check",[Globals.socTestName],
				   Atlas.call_plugin, "runTest", "checkError", {"expect": "--- Device DETACHED --- : locationID=0x[0-9A-Za-z]{8}",
				   "log": "Unit.log", "testname":"UART USB", "subtestname":"Drop", "subsubtestname":"Count", "omit":0, "byPASS":1})
		onError e ->  Atlas.Log.info("USB Disconnection Check " + e.class + " " + e.message)
	}
	else
	{
		Atlas.execute_test("UART USB Disconnection Check",[Globals.socTestName],
				   Atlas.call_plugin, "runTest", "checkError", {"expect": "--- Device DETACHED --- : locationID=0x[0-9A-Za-z]{8}",
				   "log": "Unit.log", "testname":"UART USB", "subtestname":"Drop", "subsubtestname":"Count", "omit":0, "byPASS":1})
		onError e ->  Atlas.Log.info("USB Disconnection Check " + e.class + " " + e.message)
	}
	#

	Atlas.Log.error(e.stack)

	if (shouldRunProcessControl)
	{
		finishAllProcessControl() onError e -> shouldShutdown = :TRUE:
	}

	if(shouldShutdown)
	{
		poisonDevice(:FALSE:) onError e -> Atlas.Log.error("Failed to poison Process!!")
		Atlas.Log.error("Failed to do process control!!")
	}

	if (((shouldRunProcessControl && shouldShutdown) || !shouldRunProcessControl))
	{
		#enterENV("diags", ":-)", "Finish2", "enterDiags2") onError e -> Atlas.Log.error("Failed to enter diags for Finish2!!")
		if(Globals.supportDiag == :TRUE:) {
			# enterDiags("Finish2") onError e -> Atlas.Log.error("Failed to enter diags for Finish2!!")
			enterENV("diags", ":-)", "Finish2", "enterDiags2") onError e -> Atlas.Log.error("Failed to enter diags for Finish2!!")
		}
		shutdown("Shutdown") onError e -> Atlas.Log.error("Failed to shutdown for Finish2!!")
		Atlas.execute_test("Red LED ON",[Globals.socTestName,"Red LED ON"], Atlas.call_plugin, "Fixture", "LED RED ON")
	}
}

checkValueWithLimit(name, value, lowerLimit, upperLimit)
{
	Atlas.Log.info("name: " + stringify(name) + ", value: " + stringify(value) + ", lowerLimit: " + stringify(lowerLimit) + ", upperLimit: " + stringify(upperLimit))
	if (name <> Nil && value <> Nil)
	{
		isPass = :TRUE:
		errorMessage = ""
		if (upperLimit <> Nil && numerify(value) > numerify(upperLimit))
		{
			isPass = :FALSE:
			errorMessage = "value: " + stringify(value) + " exceeds upperLimit: " + stringify(upperLimit)
		}
		if (lowerLimit <> Nil && numerify(value) < numerify(lowerLimit))
		{
			isPass = :FALSE:
			errorMessage = "value: " + stringify(value) + " exceeds lowerLimit: " + stringify(lowerLimit)
		}
		if (isPass == :FALSE:)
		{
			Globals.hasEverFailed = :TRUE:
		}
		Atlas.create_record([name], isPass, errorMessage)
	}
}

serialNumberRequest(userInfo)
{
	Globals.snReady = :FALSE:
	#units = userInfo["units"]
	units = ["Serial Number"]

	layout = [];

	for i in range(units) {
		label = {
			"type": "label",
			"text" : units[i]
		}
		field = {
			"type" : "field",
			"id" : units[i],
		}
		if(has_key(Globals.scannedSNs, units[i]))
		{
			field = {
				"type" : "label",
				"text" : Globals.scannedSNs[units[i]],
				"id" : units[i]    	
			}
		}
		layout = layout + [label, field]
	}
	if(size(Globals.snError) <> 0)
	{
		layout = layout + [{ "type": "label", "text" : Globals.snError }]
	}
	Atlas.Log.info("layout: " + stringify(layout))

	serial_number_request = {
		"type" : "custom",
		"layout" : layout
	}
	Atlas.Log.info("serialNumberRequest call show-form")
	#Globals.scannedSNs = Atlas.call_app_sync("show-form", serial_number_request)
	Globals.scannedSNs = Atlas.call_app("show-form", serial_number_request)
	if(!checkSN(Globals.scannedSNs, 17))
	{
		Atlas.Log.info(Globals.snError)
		Globals.scannedSNs = {};
	}
	else
	{
		if(Globals.unitSn == "") {
			Globals.unitSn = Globals.scannedSNs["Serial Number"]
			if(Globals.unitSn == "") {
				Globals.unitSn = Globals.scannedSNs[Atlas.Unit.unit_identifier] onError e -> Globals.unitSn = "NA";
			}
			Atlas.Log.info("Globals.unitSn: " + Globals.unitSn)
			Globals.snReady = :TRUE:
		}
		else {
			# Globals.unitSn is already available
			Globals.snReady = :TRUE:
		}
	}
}

checkSN(snDict, len)
{
	dict={}
	snKeys = keys(snDict)
	Globals.snError = ""
	for index in range(0, size(snKeys))
	{
		key = stringify(snKeys[index])
		sn = ""
		if(isNil(snDict[key])) {
			Atlas.Log.info(key + " SN: " +  stringify(snDict))
		} else {
			sn = Strings.toupper(stringify(snDict[key]))
		}
		
		Atlas.Log.info(key + " \"" + sn + "\", size: " + stringify(size(sn)))

		if (!verifySN(sn, len))
		{
			Globals.snError = key + " \"" + sn + "\" not valid!"
			Atlas.Log.error(Globals.snError)
			return :FALSE:
		}
		if (has_key(dict,sn))
		{
		 	Globals.snError = key + " \"" + sn + "\" already scanned!"
		 	Atlas.Log.error(Globals.snError)
			return :FALSE:
		}
		dict = dict + { sn : 1 }
	}
	return :TRUE:
}

verifySN(serialNumber, len)
{
/*
	if(Globals.offline)
	{
		Atlas.Log.info("SerialNumber OK: " +  stringify(serialNumber) + ", skipped SerialNumber verify in mode: "+ Atlas.Unit.test_mode_name)
		return :TRUE:
	}
*/
	dict = {}
	length = size(serialNumber)
 	radix = 34
	total = 0
	index = 0
	digits = "0123456789ABCDEFGHJKLMNPQRSTUVWXYZ"
	if(length <> len)
	{
		return :FALSE:
	}
	for index in range(0, size(digits))
	{
		dict = dict + { stringify(digits[index]) : index }
	}
	for index in range(0, length) 
	{
		digit = serialNumber[length - index - 1]
		
		if (!has_key(dict, digit)) 
		{
			return :FALSE:
		}
		foundDigit = dict[digit]
		value = foundDigit
		if (Bitops.bitAnd(index, 1) == 1) 
		{
			total = total + 3 * value
		} 
		else 
		{
			total = total + value
		}
	}
	if(total % radix <> 0)
	{
		return :FALSE:
	}
	Atlas.Log.info("SerialNumber OK: " +  stringify(serialNumber))
	return :TRUE:
}

poisonDevice(poisonCB)
{
	Atlas.Log.info("Globals.failureCount: " + stringify(Globals.failureCount))
	if (Globals.failureCount > 0)
	{
		userInfo = Atlas.call_plugin("runTest", "updateUserInfo", {})
		Atlas.Log.info("Final userinfo: " + stringify(userInfo))

		# Atlas.Log.info("retestPolicy_0: " + userInfo["retestPolicy_0"])
		# if (userInfo["retestPolicy_0"] <> Nil && userInfo["retestPolicy_0"] == "A -> FA")
		a2FA = Atlas.call_plugin("Dut", "checkA2FA")
		if (a2FA != :NIL:)
		{
			# UI_ShowMessage(Atlas.Unit.unit_identifier + ": A -> FA")

			# Atlas.call_plugin("runTest", "updateUserInfo", 
			#    {"userinfo":{ "retestPolicy_" + stringify(Globals.failureCount) : "UOP" }})
			if (poisonCB == :NIL: || poisonCB == :FALSE:)
			{
				# better to read STATION_FAIL_COUNT_ALLOWED value from gh_station_info.json file instead of writing 3 times.
				# UOP Poison  for A -> FA
				Atlas.execute_test("Finish Test Process", Atlas.call_plugin,
									"TestProcess",  "finish",{"testname":Globals.socTestName, "subtestname":"Finish Test Process","retestpolicy":"A -> FA"})
					onError e -> Globals.hasEverFailed = :TRUE:	

				System.sleep(1.5)
				poisonProcess("UOP Poison 1") onError e -> Atlas.Log.info("Failed to do UOP Poison 1.")
				Atlas.execute_test("Finish Test Process for UOP Poison 1", Atlas.call_plugin,
									"TestProcess",  "finish",{"testname":Globals.socTestName, "subtestname":"Finish Test Process for UOP Poison 1","retestpolicy":"A -> FA"})
					onError e -> Globals.hasEverFailed = :TRUE:

				System.sleep(1.5)
				poisonProcess("UOP Poison 2") onError e -> Atlas.Log.info("Failed to do UOP Poison 2.")
				Atlas.execute_test("Finish Test Process for UOP Poison 2", Atlas.call_plugin,
									"TestProcess",  "finish",{"testname":Globals.socTestName, "subtestname":"Finish Test Process for UOP Poison 2","retestpolicy":"A -> FA"})
					onError e -> Globals.hasEverFailed = :TRUE:

				System.sleep(1.5)
				poisonProcess("UOP Poison 3") onError e -> Atlas.Log.info("Failed to do UOP Poison 3.")
			}
			else
			{
				#CB Poison for A -> FA
				Atlas.execute_test("Finish Process Control",[Globals.socTestName,"Finish Process Control"], Atlas.call_plugin,
			  				"ProcessControl",  "poison",{"retestpolicy":"A -> FA"})
					onError e -> Globals.hasEverFailed = :TRUE:
			}
		}
	}
}

poisonProcess(name)
{
	configParams = {"stationID": Globals.stationID,
				  "softwareversion" : Globals.softwareVersion,
					 "softwarename" : Globals.softwareName,
					"limitsversion" : "1",
					 "serialnumber" : Globals.unitSn}
	Atlas.execute_test("Start Test Process for " + name,[Globals.socTestName,"Start Test Process for " + name], Atlas.call_plugin, "TestProcess", "start", configParams)

	Atlas.execute_test(name,[Globals.socTestName,name], Atlas.call_plugin, "StationUtils", "reportPassFail", {"names": [name], "status": "0", "failMessage": name + " for A -> FA failure."},{},
								{"timeout": 60, "description": name})  
						onError e -> Atlas.Log.info(name)

	# Add a blank file named "POISONED_DEVICE_BLOB"
	Atlas.execute_test("Upload POISONED_DEVICE_BLOB file to PDCA",[Globals.socTestName,"Upload POISONED_DEVICE_BLOB file to PDCA"], Atlas.call_plugin, "Utilities", "uploadFileToPDCA",  
		{"filePath":"/private/etc/POISONED_DEVICE_BLOB", "alwaysPass":1}) onError e -> Atlas.Log.error("POISONED_DEVICE_BLOB Upload Failed!!!")
}
